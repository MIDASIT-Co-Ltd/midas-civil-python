name: Publish Python to PyPI

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"


jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  build-and-publish:
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for Trusted Publishing

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build tools
        run: python -m pip install --upgrade build

      - name: Build dist
        run: python -m build

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


  github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [details]

    env:
      TAG_NAME: ${{ needs.details.outputs.tag_name }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches


      - name: Create GitHub Release
        id: create_release
        run: gh release create ${{ env.TAG_NAME }} --title ${{ env.TAG_NAME }} --generate-notes
        env:
          GH_TOKEN: ${{ github.token }}
